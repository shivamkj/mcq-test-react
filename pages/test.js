import { useRef, useState, useEffect } from "react";
import Head from "next/head";
import Question from "../components/Question";
import Header from "../components/Header";
import Numbering from "../components/Numbering";
import ModalForm from "../components/ModalForm";
import Spinner from "../components/Spinner";
import PieChart from "../components/PieChart";

const Test = () => {
  const [data, setData] = useState(null);
  const [isFinished, setFinished] = useState(false);
  const [modalVisible, setModalVisibility] = useState(false);
  const [isLoading, setLoading] = useState(true);
  const selectedOption = useRef([]);
  const result = useRef({});

  const handleSubmit = (e) => {
    e.preventDefault();
    const scriptURL =
      "https://script.google.com/macros/s/AKfycbxKk4552fK-aOMQa1M5_cvAl3qqeO3G4AHqXDHptionQPd3ntU/exec";
    const formData = new FormData(document.getElementById("form"));
    fetch(scriptURL, { method: "POST", body: formData }).then((response) => {
      setModalVisibility(false);
      localStorage.setItem("name", formData.get("name"));
    });
  };

  const onSubmit = () => {
    const totalQuestion = parseInt(data.questions[data.questions.length - 1].N);
    const score = {
      correct: 0,
      wrong: 0,
      skipped: 0,
      total: totalQuestion,
    };
    let count = 0;
    const length = data.questions.length;
    for (let i = 0; i < length; i++) {
      if (!data.questions[i].A) count++;
      else if (!selectedOption.current[i - count]) score.skipped++;
      else if (data.questions[i].A == selectedOption.current[i - count])
        score.correct++;
      else score.wrong++;
    }
    const percentage = (score.correct / score.total) * 100;
    const percentageRounded = parseFloat(percentage).toFixed(2);
    if (percentageRounded > 50)
      result.current.message = `Congratulation, you have scored ${score.correct} out of ${score.total} ( ${percentageRounded}% ). Best of Luck for the next test.`;
    else
      result.current.message = `You scored ${score.correct} out of ${score.total} ( ${percentageRounded}% ). You can improve more. Best of Luck for the next test.`;

    result.current.score = score;
    setFinished(true);
  };

  useEffect(() => {
    const id = window.location.search.substring(1).slice(3);
    // const url = `https://dailytest.s3.ap-south-1.amazonaws.com/${id}.json`;
    const url = "/sample_test.json";
    fetch(url)
      .then((res) => res.json())
      .then((result) => {
        setData(result);
        setLoading(false);
      })
      .catch(() => {
        setLoading(false);
      });
  }, []);

  if (isLoading) return <Spinner />;

  return (
    <>
      <Head>
        <title>Target with SK Sir</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header
        TIME_LIMIT={parseInt(data.header[4]) * 60}
        isFinished={isFinished}
        onFinish={onSubmit}
      />

      <div className="container flex mt-20">
        <div className="w-full md:w-2/3 p-1">
          <div className="px-3 py-2 mb-2 text-center rounded font-semibold bg-indigo-200 text-indigo-800 lg:max-w-2xl">
            {data.header[0]}
          </div>
          <div className="px-3 py-2 mb-2 rounded font-semibold bg-indigo-200 text-indigo-800 flex justify-between lg:max-w-2xl">
            <span>{data.header[1]}</span>
            <span>{data.header[2]}</span>
          </div>

          <div id="questions">
            {data.questions.map((question) => {
              if (typeof question.N == typeof 0)
                return (
                  <Question
                    key={`Q${question.N}`}
                    isFinished={isFinished}
                    question={question}
                    allSelectedOptions={selectedOption}
                  />
                );
              else if (question.N == "P")
                return (
                  <div>
                    <div> {question.Q} </div>
                    <div> {question.H} </div>
                    <div> {question.B} </div>
                  </div>
                );
              else if (question.N == "I") return <div> {question.I} </div>;
            })}
          </div>

          <div className="text-center">
            {isFinished ? (
              <>
                <h4 className="text-center text-xl mt-8 max-w-lg">
                  {result.current.message}
                </h4>
                <PieChart />
              </>
            ) : (
              <button
                onClick={onSubmit}
                className="bg-indigo-600 px-4 py-2 text-white rounded my-3"
              >
                Submit
              </button>
            )}
          </div>
        </div>
      </div>

      <Numbering
        total={parseInt(data.questions[data.questions.length - 1].N)}
      />

      {modalVisible && (
        <ModalForm handleSubmit={handleSubmit} show={modalVisible} />
      )}
    </>
  );
};

export default Test;
