import { useRef, useState, useEffect } from "react";
import { CSSTransition, TransitionGroup } from "react-transition-group";
import Head from "next/head";
import Question from "../../components/interactiive-mcq/Question";
import Header from "../../components/interactiive-mcq/Header";
import Timer from "../../components/interactiive-mcq/Timer";
import Loader from "../../components/Loader";
import showToast from "../../utils/toast";
import showConfetti from "../../utils/confetti";

// const correctSound = new Audio("/correct.wav");
// const wrongSound = new Audio("/incorrect.wav");

const Test = () => {
  const [data, setData] = useState(null);
  const [isFinished, setFinished] = useState(false);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [isLoading, setLoading] = useState(true);
  const result = useRef([]);

  useEffect(() => {
    const id = window.location.search.substring(1).slice(3);
    // const url = `https://dailytest.s3.ap-south-1.amazonaws.com/${id}.json`;
    const url = "/sample_test.json";
    fetch(url)
      .then((res) => res.json())
      .then((result) => {
        setData(result);
        setLoading(false);
      })
      .catch(() => {
        setLoading(false);
      });
  }, []);

  const onFinish = (isCorrect, selectedIndex) => {
    if (isCorrect == true) {
      // correctSound.play();
      showConfetti();
    } else if (isCorrect == undefined) {
      showToast("Question Skipped", "INFO");
    } else {
      showToast("Incorrect Answer", "ERROR");
      // wrongSound.play();
    }
    setFinished(true);
    result.current[currentQuestion] = {
      isCorrect,
      selectedOption: selectedIndex,
    };
    if (currentQuestion + 1 == data.questions.length) {
      console.log(result);
    } else {
      setTimeout(() => {
        setCurrentQuestion(currentQuestion + 1);
        setFinished(false);
      }, 4000);
    }
  };

  if (isLoading) return <Loader message="Loading" />;

  return (
    <>
      {/* <div
        className="fixed top-0 bottom-0 left-0 right-0 bg-purple-gradient"
        style={{ zIndex: -10 }}
      /> */}
      <Head>
        <title>Target with SK Sir</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header />
      <Timer TIME_LIMIT={10} isFinished={isFinished} onFinish={onFinish} />
      <div className="container" style={{ minHeight: "calc(50vh)" }}>
        <TransitionGroup>
          <CSSTransition
            key={currentQuestion}
            timeout={1000}
            classNames="slide"
          >
            <Question
              isFinished={isFinished}
              onFinish={onFinish}
              question={data.questions[currentQuestion]}
            />
          </CSSTransition>
        </TransitionGroup>
        <div className="fixed bottom-2 left-1/2 transform -translate-x-1/2 rounded-lg overflow-hidden">
          {!isFinished && (
            <button
              className="px-4 py-2 bg-indigo-600 text-white"
              onClick={onFinish}
            >
              Skip
            </button>
          )}
        </div>
      </div>
    </>
  );
};

export default Test;
