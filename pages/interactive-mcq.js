import { useEffect, useRef, useState } from "react";
import { CSSTransition, TransitionGroup } from "react-transition-group";
import Head from "next/head";
import Question from "../components/interactiive-mcq/Question";
import Header from "../components/interactiive-mcq/Header";
import Timer from "../components/interactiive-mcq/Timer";
import Loader from "../components/Loader";
import showToast from "../utils/toast";
import showConfetti from "../utils/confetti";
import useFetch from "../utils/useFetch";
import StartModal from "../components/interactiive-mcq/StartModal";
import Result from "../components/interactiive-mcq/Result";
import getResultAnaysis from "../utils/result";

const correctSound = typeof Audio != "undefined" && new Audio("/correct.wav");
const wrongSound = typeof Audio != "undefined" && new Audio("/incorrect.wav");

const TIME_BETWEEN_QUESTIONS = 4000; // in milliseconds
const TIME_LIMIT = 10; // in seconds

const Test = () => {
  const [testStarted, setTestStarted] = useState(null);
  const [questionFinished, setQuestionFinished] = useState(false);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [data, isLoading] = useFetch("/sample_test.json");
  const userResponse = useRef([]);
  const timeTaken = useRef([]);

  useEffect(() => {
    console.log("initialising test");
  }, [data]);

  const onFinish = (isCorrect, selectedIndex) => {
    if (isCorrect == true) {
      correctSound.play();
      showConfetti();
    } else if (isCorrect == undefined) {
      showToast("Question Skipped", "INFO");
    } else {
      showToast("Incorrect Answer", "ERROR");
      wrongSound.play();
    }
    setQuestionFinished(true);
    userResponse.current[currentQuestion] = {
      isCorrect,
      selectedOption: selectedIndex,
    };
    if (currentQuestion + 1 == data.questions.length) {
      // Test Finished
      console.log(timeTaken.current);
      setTimeout(() => setTestStarted(false), TIME_BETWEEN_QUESTIONS);
    } else {
      setTimeout(() => {
        setCurrentQuestion(currentQuestion + 1);
        setQuestionFinished(false);
      }, TIME_BETWEEN_QUESTIONS);
    }
  };

  const noteTimeTaken = (time) => {
    timeTaken.current[currentQuestion] = time;
  };

  if (isLoading == true) return <Loader message="Loading" />;

  if (testStarted == null)
    return (
      <StartModal
        examInfo={data.examInfo}
        onStart={() => setTestStarted(true)}
      />
    );

  if (testStarted == false)
    return (
      <Result
        questions={data.questions}
        resultAnalysis={getResultAnaysis(
          userResponse.current,
          timeTaken.current,
          TIME_LIMIT
        )}
      />
    );

  return (
    <>
      <Head>
        <title>Target with SK Sir</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header />
      <Timer
        TIME_LIMIT={TIME_LIMIT}
        isFinished={questionFinished}
        onFinish={onFinish}
        noteTimeTaken={noteTimeTaken}
      />

      <TransitionGroup>
        <CSSTransition key={currentQuestion} timeout={1000} classNames="slide">
          <Question
            isFinished={questionFinished}
            onFinish={onFinish}
            question={data.questions[currentQuestion]}
            className="absolute left-0 right-0 mx-auto sm:max-w-xl lg:max-w-3xl mt-4 sm:mt-8 lg:mt-12 p-2 z-20"
          />
        </CSSTransition>
      </TransitionGroup>
      <div className="fixed bottom-2 left-1/2 transform -translate-x-1/2 overflow-hidden">
        {!questionFinished && (
          <button
            className="px-4 py-2 bg-indigo-600 text-white rounded-lg"
            onClick={() => onFinish(undefined)}
          >
            Skip
          </button>
        )}
      </div>
    </>
  );
};

export default Test;
